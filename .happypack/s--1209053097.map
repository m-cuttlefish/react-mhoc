{"version":3,"sources":["node_modules/react-dom/lib/inputValueTracking.js"],"names":["ReactDOMComponentTree","require","isCheckable","elem","type","nodeName","toLowerCase","getTracker","inst","_wrapperState","valueTracker","attachTracker","tracker","detachTracker","getValueFromNode","node","value","checked","inputValueTracking","_getTrackerFromNode","getInstanceFromNode","track","getNodeFromInstance","valueField","descriptor","Object","getOwnPropertyDescriptor","constructor","prototype","currentValue","hasOwnProperty","get","set","defineProperty","enumerable","configurable","call","getValue","setValue","stopTracking","updateValueIfChanged","lastValue","nextValue","module","exports"],"mappings":"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","file":"inputValueTracking.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n}\n\nfunction getTracker(inst) {\n  return inst._wrapperState.valueTracker;\n}\n\nfunction attachTracker(inst, tracker) {\n  inst._wrapperState.valueTracker = tracker;\n}\n\nfunction detachTracker(inst) {\n  delete inst._wrapperState.valueTracker;\n}\n\nfunction getValueFromNode(node) {\n  var value;\n  if (node) {\n    value = isCheckable(node) ? '' + node.checked : node.value;\n  }\n  return value;\n}\n\nvar inputValueTracking = {\n  // exposed for testing\n  _getTrackerFromNode: function (node) {\n    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));\n  },\n\n\n  track: function (inst) {\n    if (getTracker(inst)) {\n      return;\n    }\n\n    var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n    var valueField = isCheckable(node) ? 'checked' : 'value';\n    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n    var currentValue = '' + node[valueField];\n\n    // if someone has already defined a value or Safari, then bail\n    // and don't track value will cause over reporting of changes,\n    // but it's better then a hard failure\n    // (needed for certain tests that spyOn input values and Safari)\n    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n      return;\n    }\n\n    Object.defineProperty(node, valueField, {\n      enumerable: descriptor.enumerable,\n      configurable: true,\n      get: function () {\n        return descriptor.get.call(this);\n      },\n      set: function (value) {\n        currentValue = '' + value;\n        descriptor.set.call(this, value);\n      }\n    });\n\n    attachTracker(inst, {\n      getValue: function () {\n        return currentValue;\n      },\n      setValue: function (value) {\n        currentValue = '' + value;\n      },\n      stopTracking: function () {\n        detachTracker(inst);\n        delete node[valueField];\n      }\n    });\n  },\n\n  updateValueIfChanged: function (inst) {\n    if (!inst) {\n      return false;\n    }\n    var tracker = getTracker(inst);\n\n    if (!tracker) {\n      inputValueTracking.track(inst);\n      return true;\n    }\n\n    var lastValue = tracker.getValue();\n    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));\n\n    if (nextValue !== lastValue) {\n      tracker.setValue(nextValue);\n      return true;\n    }\n\n    return false;\n  },\n  stopTracking: function (inst) {\n    var tracker = getTracker(inst);\n    if (tracker) {\n      tracker.stopTracking();\n    }\n  }\n};\n\nmodule.exports = inputValueTracking;"]}