{"version":3,"sources":["node_modules/fbjs/lib/createArrayFromMixed.js"],"names":["invariant","require","toArray","obj","length","Array","isArray","process","env","NODE_ENV","callee","hasOwnProperty","prototype","slice","call","e","ret","ii","hasArrayNature","nodeType","createArrayFromMixed","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;;;;;;;AAWA,IAAIA,YAAYC,QAAQ,aAAR,CAAhB;;AAEA;;;;;;;;;AASA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AACpB,MAAIC,SAASD,IAAIC,MAAjB;;AAEA;AACA;AACA,IAAE,CAACC,MAAMC,OAAN,CAAcH,GAAd,CAAD,KAAwB,QAAOA,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,UAAlE,CAAF,IAAmFI,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,qCAAjB,CAAxC,GAAkGA,UAAU,KAAV,CAArL,GAAwM,KAAK,CAA7M;;AAEA,IAAE,OAAOI,MAAP,KAAkB,QAApB,IAAgCG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,yCAAjB,CAAxC,GAAsGA,UAAU,KAAV,CAAtI,GAAyJ,KAAK,CAA9J;;AAEA,IAAEI,WAAW,CAAX,IAAgBA,SAAS,CAAT,IAAcD,GAAhC,IAAuCI,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,8CAAjB,CAAxC,GAA2GA,UAAU,KAAV,CAAlJ,GAAqK,KAAK,CAA1K;;AAEA,IAAE,OAAOG,IAAIO,MAAX,KAAsB,UAAxB,IAAsCH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCT,UAAU,KAAV,EAAiB,4DAA4D,iDAA7E,CAAxC,GAA0KA,UAAU,KAAV,CAAhN,GAAmO,KAAK,CAAxO;;AAEA;AACA;AACA;AACA,MAAIG,IAAIQ,cAAR,EAAwB;AACtB,QAAI;AACF,aAAON,MAAMO,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BX,GAA3B,CAAP;AACD,KAFD,CAEE,OAAOY,CAAP,EAAU;AACV;AACD;AACF;;AAED;AACA;AACA,MAAIC,MAAMX,MAAMD,MAAN,CAAV;AACA,OAAK,IAAIa,KAAK,CAAd,EAAiBA,KAAKb,MAAtB,EAA8Ba,IAA9B,EAAoC;AAClCD,QAAIC,EAAJ,IAAUd,IAAIc,EAAJ,CAAV;AACD;AACD,SAAOD,GAAP;AACD;;AAED;;;;;;;;;;;;;;;AAeA,SAASE,cAAT,CAAwBf,GAAxB,EAA6B;AAC3B;AACE;AACA,KAAC,CAACA,GAAF;AACA;AACA,YAAOA,GAAP,yCAAOA,GAAP,MAAc,QAAd,IAA0B,OAAOA,GAAP,IAAc,UAFxC;AAGA;AACA,gBAAYA,GAJZ;AAKA;AACA,MAAE,iBAAiBA,GAAnB,CANA;AAOA;AACA;AACA,WAAOA,IAAIgB,QAAX,IAAuB,QATvB;AAUA;AACAd,UAAMC,OAAN,CAAcH,GAAd;AACA;AACA,gBAAYA,GAFZ;AAGA;AACA,cAAUA,GAfV;AAFF;AAmBD;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASiB,oBAAT,CAA8BjB,GAA9B,EAAmC;AACjC,MAAI,CAACe,eAAef,GAAf,CAAL,EAA0B;AACxB,WAAO,CAACA,GAAD,CAAP;AACD,GAFD,MAEO,IAAIE,MAAMC,OAAN,CAAcH,GAAd,CAAJ,EAAwB;AAC7B,WAAOA,IAAIU,KAAJ,EAAP;AACD,GAFM,MAEA;AACL,WAAOX,QAAQC,GAAR,CAAP;AACD;AACF;;AAEDkB,OAAOC,OAAP,GAAiBF,oBAAjB","file":"createArrayFromMixed.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks\n */\n\nvar invariant = require('./invariant');\n\n/**\n * Convert array-like objects to arrays.\n *\n * This API assumes the caller knows the contents of the data type. For less\n * well defined inputs use createArrayFromMixed.\n *\n * @param {object|function|filelist} obj\n * @return {array}\n */\nfunction toArray(obj) {\n  var length = obj.length;\n\n  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList\n  // in old versions of Safari).\n  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;\n\n  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;\n\n  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;\n\n  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;\n\n  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs\n  // without method will throw during the slice call and skip straight to the\n  // fallback.\n  if (obj.hasOwnProperty) {\n    try {\n      return Array.prototype.slice.call(obj);\n    } catch (e) {\n      // IE < 9 does not support Array#slice on collections objects\n    }\n  }\n\n  // Fall back to copying key by key. This assumes all keys have a value,\n  // so will not preserve sparsely populated inputs.\n  var ret = Array(length);\n  for (var ii = 0; ii < length; ii++) {\n    ret[ii] = obj[ii];\n  }\n  return ret;\n}\n\n/**\n * Perform a heuristic test to determine if an object is \"array-like\".\n *\n *   A monk asked Joshu, a Zen master, \"Has a dog Buddha nature?\"\n *   Joshu replied: \"Mu.\"\n *\n * This function determines if its argument has \"array nature\": it returns\n * true if the argument is an actual array, an `arguments' object, or an\n * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).\n *\n * It will return false for other array-like objects like Filelist.\n *\n * @param {*} obj\n * @return {boolean}\n */\nfunction hasArrayNature(obj) {\n  return (\n    // not null/false\n    !!obj && (\n    // arrays are objects, NodeLists are functions in Safari\n    typeof obj == 'object' || typeof obj == 'function') &&\n    // quacks like an array\n    'length' in obj &&\n    // not window\n    !('setInterval' in obj) &&\n    // no DOM node should be considered an array-like\n    // a 'select' element has 'length' and 'item' properties on IE8\n    typeof obj.nodeType != 'number' && (\n    // a real array\n    Array.isArray(obj) ||\n    // arguments\n    'callee' in obj ||\n    // HTMLCollection/NodeList\n    'item' in obj)\n  );\n}\n\n/**\n * Ensure that the argument is an array by wrapping it in an array if it is not.\n * Creates a copy of the argument if it is already an array.\n *\n * This is mostly useful idiomatically:\n *\n *   var createArrayFromMixed = require('createArrayFromMixed');\n *\n *   function takesOneOrMoreThings(things) {\n *     things = createArrayFromMixed(things);\n *     ...\n *   }\n *\n * This allows you to treat `things' as an array, but accept scalars in the API.\n *\n * If you need to convert an array-like object, like `arguments`, into an array\n * use toArray instead.\n *\n * @param {*} obj\n * @return {array}\n */\nfunction createArrayFromMixed(obj) {\n  if (!hasArrayNature(obj)) {\n    return [obj];\n  } else if (Array.isArray(obj)) {\n    return obj.slice();\n  } else {\n    return toArray(obj);\n  }\n}\n\nmodule.exports = createArrayFromMixed;"]}