{"version":3,"sources":["node_modules/react-dom/lib/ReactEventListener.js"],"names":["_assign","require","EventListener","ExecutionEnvironment","PooledClass","ReactDOMComponentTree","ReactUpdates","getEventTarget","getUnboundedScrollPosition","findParent","inst","_hostParent","rootNode","getNodeFromInstance","container","parentNode","getClosestInstanceFromNode","TopLevelCallbackBookKeeping","topLevelType","nativeEvent","ancestors","prototype","destructor","length","addPoolingTo","twoArgumentPooler","handleTopLevelImpl","bookKeeping","nativeEventTarget","targetInst","ancestor","push","i","ReactEventListener","_handleTopLevel","scrollValueMonitor","cb","scrollPosition","window","_enabled","WINDOW_HANDLE","canUseDOM","setHandleTopLevel","handleTopLevel","setEnabled","enabled","isEnabled","trapBubbledEvent","handlerBaseName","element","listen","dispatchEvent","bind","trapCapturedEvent","capture","monitorScrollValue","refresh","callback","getPooled","batchedUpdates","release","module","exports"],"mappings":"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","file":"ReactEventListener.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar EventListener = require('fbjs/lib/EventListener');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar PooledClass = require('./PooledClass');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar getEventTarget = require('./getEventTarget');\nvar getUnboundedScrollPosition = require('fbjs/lib/getUnboundedScrollPosition');\n\n/**\n * Find the deepest React component completely containing the root of the\n * passed-in instance (for use when entire React trees are nested within each\n * other). If React trees are not nested, returns null.\n */\nfunction findParent(inst) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  while (inst._hostParent) {\n    inst = inst._hostParent;\n  }\n  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);\n  var container = rootNode.parentNode;\n  return ReactDOMComponentTree.getClosestInstanceFromNode(container);\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {\n  this.topLevelType = topLevelType;\n  this.nativeEvent = nativeEvent;\n  this.ancestors = [];\n}\n_assign(TopLevelCallbackBookKeeping.prototype, {\n  destructor: function () {\n    this.topLevelType = null;\n    this.nativeEvent = null;\n    this.ancestors.length = 0;\n  }\n});\nPooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);\n\nfunction handleTopLevelImpl(bookKeeping) {\n  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);\n  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = targetInst;\n  do {\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = ancestor && findParent(ancestor);\n  } while (ancestor);\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    targetInst = bookKeeping.ancestors[i];\n    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));\n  }\n}\n\nfunction scrollValueMonitor(cb) {\n  var scrollPosition = getUnboundedScrollPosition(window);\n  cb(scrollPosition);\n}\n\nvar ReactEventListener = {\n  _enabled: true,\n  _handleTopLevel: null,\n\n  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,\n\n  setHandleTopLevel: function (handleTopLevel) {\n    ReactEventListener._handleTopLevel = handleTopLevel;\n  },\n\n  setEnabled: function (enabled) {\n    ReactEventListener._enabled = !!enabled;\n  },\n\n  isEnabled: function () {\n    return ReactEventListener._enabled;\n  },\n\n  /**\n   * Traps top-level events by using event bubbling.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} element Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {\n    if (!element) {\n      return null;\n    }\n    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  /**\n   * Traps a top-level event by using event capturing.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {string} handlerBaseName Event name (e.g. \"click\").\n   * @param {object} element Element on which to attach listener.\n   * @return {?object} An object with a remove function which will forcefully\n   *                  remove the listener.\n   * @internal\n   */\n  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {\n    if (!element) {\n      return null;\n    }\n    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));\n  },\n\n  monitorScrollValue: function (refresh) {\n    var callback = scrollValueMonitor.bind(null, refresh);\n    EventListener.listen(window, 'scroll', callback);\n  },\n\n  dispatchEvent: function (topLevelType, nativeEvent) {\n    if (!ReactEventListener._enabled) {\n      return;\n    }\n\n    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);\n    try {\n      // Event queue being processed in the same cycle allows\n      // `preventDefault`.\n      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);\n    } finally {\n      TopLevelCallbackBookKeeping.release(bookKeeping);\n    }\n  }\n};\n\nmodule.exports = ReactEventListener;"]}