{"version":3,"sources":["node_modules/react-dom/lib/SyntheticKeyboardEvent.js"],"names":["SyntheticUIEvent","require","getEventCharCode","getEventKey","getEventModifierState","KeyboardEventInterface","key","location","ctrlKey","shiftKey","altKey","metaKey","repeat","locale","getModifierState","charCode","event","type","keyCode","which","SyntheticKeyboardEvent","dispatchConfig","dispatchMarker","nativeEvent","nativeEventTarget","call","augmentClass","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,mBAAmBC,QAAQ,oBAAR,CAAvB;;AAEA,IAAIC,mBAAmBD,QAAQ,oBAAR,CAAvB;AACA,IAAIE,cAAcF,QAAQ,eAAR,CAAlB;AACA,IAAIG,wBAAwBH,QAAQ,yBAAR,CAA5B;;AAEA;;;;AAIA,IAAII,yBAAyB;AAC3BC,OAAKH,WADsB;AAE3BI,YAAU,IAFiB;AAG3BC,WAAS,IAHkB;AAI3BC,YAAU,IAJiB;AAK3BC,UAAQ,IALmB;AAM3BC,WAAS,IANkB;AAO3BC,UAAQ,IAPmB;AAQ3BC,UAAQ,IARmB;AAS3BC,oBAAkBV,qBATS;AAU3B;AACAW,YAAU,kBAAUC,KAAV,EAAiB;AACzB;AACA;;AAEA;AACA;AACA,QAAIA,MAAMC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOf,iBAAiBc,KAAjB,CAAP;AACD;AACD,WAAO,CAAP;AACD,GArB0B;AAsB3BE,WAAS,iBAAUF,KAAV,EAAiB;AACxB;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAIA,MAAMC,IAAN,KAAe,SAAf,IAA4BD,MAAMC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,MAAME,OAAb;AACD;AACD,WAAO,CAAP;AACD,GAlC0B;AAmC3BC,SAAO,eAAUH,KAAV,EAAiB;AACtB;AACA;AACA,QAAIA,MAAMC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,aAAOf,iBAAiBc,KAAjB,CAAP;AACD;AACD,QAAIA,MAAMC,IAAN,KAAe,SAAf,IAA4BD,MAAMC,IAAN,KAAe,OAA/C,EAAwD;AACtD,aAAOD,MAAME,OAAb;AACD;AACD,WAAO,CAAP;AACD;AA7C0B,CAA7B;;AAgDA;;;;;;AAMA,SAASE,sBAAT,CAAgCC,cAAhC,EAAgDC,cAAhD,EAAgEC,WAAhE,EAA6EC,iBAA7E,EAAgG;AAC9F,SAAOxB,iBAAiByB,IAAjB,CAAsB,IAAtB,EAA4BJ,cAA5B,EAA4CC,cAA5C,EAA4DC,WAA5D,EAAyEC,iBAAzE,CAAP;AACD;;AAEDxB,iBAAiB0B,YAAjB,CAA8BN,sBAA9B,EAAsDf,sBAAtD;;AAEAsB,OAAOC,OAAP,GAAiBR,sBAAjB","file":"SyntheticKeyboardEvent.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar getEventCharCode = require('./getEventCharCode');\nvar getEventKey = require('./getEventKey');\nvar getEventModifierState = require('./getEventModifierState');\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar KeyboardEventInterface = {\n  key: getEventKey,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: getEventModifierState,\n  // Legacy Interface\n  charCode: function (event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    return 0;\n  },\n  keyCode: function (event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function (event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return getEventCharCode(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @extends {SyntheticUIEvent}\n */\nfunction SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);\n\nmodule.exports = SyntheticKeyboardEvent;"]}