{"version":3,"sources":["node_modules/react-dom/lib/ReactDOMOption.js"],"names":["_assign","require","React","ReactDOMComponentTree","ReactDOMSelect","warning","didWarnInvalidOptionChildren","flattenChildren","children","content","Children","forEach","child","process","env","NODE_ENV","ReactDOMOption","mountWrapper","inst","props","hostParent","selected","selectValue","selectParent","_tag","_hostParent","getSelectValueContext","value","Array","isArray","i","length","_wrapperState","postMountWrapper","_currentElement","node","getNodeFromInstance","setAttribute","getHostProps","hostProps","undefined","module","exports"],"mappings":"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","file":"ReactDOMOption.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar React = require('react/lib/React');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactDOMSelect = require('./ReactDOMSelect');\n\nvar warning = require('fbjs/lib/warning');\nvar didWarnInvalidOptionChildren = false;\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    } else if (!didWarnInvalidOptionChildren) {\n      didWarnInvalidOptionChildren = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\nvar ReactDOMOption = {\n  mountWrapper: function (inst, props, hostParent) {\n    // TODO (yungsters): Remove support for `selected` in <option>.\n    if (process.env.NODE_ENV !== 'production') {\n      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;\n    }\n\n    // Look up whether this option is 'selected'\n    var selectValue = null;\n    if (hostParent != null) {\n      var selectParent = hostParent;\n\n      if (selectParent._tag === 'optgroup') {\n        selectParent = selectParent._hostParent;\n      }\n\n      if (selectParent != null && selectParent._tag === 'select') {\n        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);\n      }\n    }\n\n    // If the value is null (e.g., no specified value or after initial mount)\n    // or missing (e.g., for <datalist>), we don't change props.selected\n    var selected = null;\n    if (selectValue != null) {\n      var value;\n      if (props.value != null) {\n        value = props.value + '';\n      } else {\n        value = flattenChildren(props.children);\n      }\n      selected = false;\n      if (Array.isArray(selectValue)) {\n        // multiple\n        for (var i = 0; i < selectValue.length; i++) {\n          if ('' + selectValue[i] === value) {\n            selected = true;\n            break;\n          }\n        }\n      } else {\n        selected = '' + selectValue === value;\n      }\n    }\n\n    inst._wrapperState = { selected: selected };\n  },\n\n  postMountWrapper: function (inst) {\n    // value=\"\" should make a value attribute (#6219)\n    var props = inst._currentElement.props;\n    if (props.value != null) {\n      var node = ReactDOMComponentTree.getNodeFromInstance(inst);\n      node.setAttribute('value', props.value);\n    }\n  },\n\n  getHostProps: function (inst, props) {\n    var hostProps = _assign({ selected: undefined, children: undefined }, props);\n\n    // Read state only from initial mount because <select> updates value\n    // manually; we need the initial state only for server rendering\n    if (inst._wrapperState.selected != null) {\n      hostProps.selected = inst._wrapperState.selected;\n    }\n\n    var content = flattenChildren(props.children);\n\n    if (content) {\n      hostProps.children = content;\n    }\n\n    return hostProps;\n  }\n};\n\nmodule.exports = ReactDOMOption;"]}