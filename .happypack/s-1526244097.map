{"version":3,"sources":["node_modules/react-dom/lib/ReactRef.js"],"names":["ReactOwner","require","ReactRef","attachRef","ref","component","owner","getPublicInstance","addComponentAsRefTo","detachRef","removeComponentAsRefFrom","attachRefs","instance","element","_owner","shouldUpdateRefs","prevElement","nextElement","prevRef","prevOwner","nextRef","nextOwner","detachRefs","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;;;AAEA,IAAIA,aAAaC,QAAQ,cAAR,CAAjB;;AAEA,IAAIC,WAAW,EAAf;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,SAAxB,EAAmCC,KAAnC,EAA0C;AACxC,MAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAIC,UAAUE,iBAAV,EAAJ;AACD,GAFD,MAEO;AACL;AACAP,eAAWQ,mBAAX,CAA+BH,SAA/B,EAA0CD,GAA1C,EAA+CE,KAA/C;AACD;AACF;;AAED,SAASG,SAAT,CAAmBL,GAAnB,EAAwBC,SAAxB,EAAmCC,KAAnC,EAA0C;AACxC,MAAI,OAAOF,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAI,IAAJ;AACD,GAFD,MAEO;AACL;AACAJ,eAAWU,wBAAX,CAAoCL,SAApC,EAA+CD,GAA/C,EAAoDE,KAApD;AACD;AACF;;AAEDJ,SAASS,UAAT,GAAsB,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AACjD,MAAIA,YAAY,IAAZ,IAAoB,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAA3C,EAAqD;AACnD;AACD;AACD,MAAIT,MAAMS,QAAQT,GAAlB;AACA,MAAIA,OAAO,IAAX,EAAiB;AACfD,cAAUC,GAAV,EAAeQ,QAAf,EAAyBC,QAAQC,MAAjC;AACD;AACF,CARD;;AAUAZ,SAASa,gBAAT,GAA4B,UAAUC,WAAV,EAAuBC,WAAvB,EAAoC;AAC9D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAU,IAAd;AACA,MAAIC,YAAY,IAAhB;AACA,MAAIH,gBAAgB,IAAhB,IAAwB,QAAOA,WAAP,yCAAOA,WAAP,OAAuB,QAAnD,EAA6D;AAC3DE,cAAUF,YAAYZ,GAAtB;AACAe,gBAAYH,YAAYF,MAAxB;AACD;;AAED,MAAIM,UAAU,IAAd;AACA,MAAIC,YAAY,IAAhB;AACA,MAAIJ,gBAAgB,IAAhB,IAAwB,QAAOA,WAAP,yCAAOA,WAAP,OAAuB,QAAnD,EAA6D;AAC3DG,cAAUH,YAAYb,GAAtB;AACAiB,gBAAYJ,YAAYH,MAAxB;AACD;;AAED,SAAOI,YAAYE,OAAZ;AACP;AACA,SAAOA,OAAP,KAAmB,QAAnB,IAA+BC,cAAcF,SAF7C;AAGD,CA9BD;;AAgCAjB,SAASoB,UAAT,GAAsB,UAAUV,QAAV,EAAoBC,OAApB,EAA6B;AACjD,MAAIA,YAAY,IAAZ,IAAoB,QAAOA,OAAP,yCAAOA,OAAP,OAAmB,QAA3C,EAAqD;AACnD;AACD;AACD,MAAIT,MAAMS,QAAQT,GAAlB;AACA,MAAIA,OAAO,IAAX,EAAiB;AACfK,cAAUL,GAAV,EAAeQ,QAAf,EAAyBC,QAAQC,MAAjC;AACD;AACF,CARD;;AAUAS,OAAOC,OAAP,GAAiBtB,QAAjB","file":"ReactRef.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevRef = null;\n  var prevOwner = null;\n  if (prevElement !== null && typeof prevElement === 'object') {\n    prevRef = prevElement.ref;\n    prevOwner = prevElement._owner;\n  }\n\n  var nextRef = null;\n  var nextOwner = null;\n  if (nextElement !== null && typeof nextElement === 'object') {\n    nextRef = nextElement.ref;\n    nextOwner = nextElement._owner;\n  }\n\n  return prevRef !== nextRef ||\n  // If owner changes but we have an unchanged function ref, don't update refs\n  typeof nextRef === 'string' && nextOwner !== prevOwner;\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || typeof element !== 'object') {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;"]}