{"version":3,"sources":["node_modules/react-dom/lib/ChangeEventPlugin.js"],"names":["EventPluginHub","require","EventPropagators","ExecutionEnvironment","ReactDOMComponentTree","ReactUpdates","SyntheticEvent","inputValueTracking","getEventTarget","isEventSupported","isTextInputElement","eventTypes","change","phasedRegistrationNames","bubbled","captured","dependencies","createAndAccumulateChangeEvent","inst","nativeEvent","target","event","getPooled","type","accumulateTwoPhaseDispatches","activeElement","activeElementInst","shouldUseChangeEvent","elem","nodeName","toLowerCase","doesChangeEventBubble","canUseDOM","document","documentMode","manualDispatchChangeEvent","batchedUpdates","runEventInBatch","enqueueEvents","processEventQueue","startWatchingForChangeEventIE8","targetInst","attachEvent","stopWatchingForChangeEventIE8","detachEvent","getInstIfValueChanged","updated","updateValueIfChanged","simulated","ChangeEventPlugin","_allowSimulatedPassThrough","getTargetInstForChangeEvent","topLevelType","handleEventsForChangeEventIE8","isInputEventSupported","startWatchingForValueChange","handlePropertyChange","stopWatchingForValueChange","propertyName","handleEventsForInputEventPolyfill","getTargetInstForInputEventPolyfill","shouldUseClickEvent","getTargetInstForClickEvent","getTargetInstForInputOrChangeEvent","handleControlledInputBlur","node","state","_wrapperState","controlled","value","getAttribute","setAttribute","_isInputEventSupported","extractEvents","nativeEventTarget","targetNode","getNodeFromInstance","window","getTargetInstFunc","handleEventFunc","module","exports"],"mappings":"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","file":"ChangeEventPlugin.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar ReactUpdates = require('./ReactUpdates');\nvar SyntheticEvent = require('./SyntheticEvent');\n\nvar inputValueTracking = require('./inputValueTracking');\nvar getEventTarget = require('./getEventTarget');\nvar isEventSupported = require('./isEventSupported');\nvar isTextInputElement = require('./isTextInputElement');\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: 'onChange',\n      captured: 'onChangeCapture'\n    },\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\n  }\n};\n\nfunction createAndAccumulateChangeEvent(inst, nativeEvent, target) {\n  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);\n  event.type = 'change';\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nvar doesChangeEventBubble = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // See `handleChange` comment below\n  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  ReactUpdates.batchedUpdates(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.enqueueEvents(event);\n  EventPluginHub.processEventQueue(false);\n}\n\nfunction startWatchingForChangeEventIE8(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onchange', manualDispatchChangeEvent);\n}\n\nfunction stopWatchingForChangeEventIE8() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onchange', manualDispatchChangeEvent);\n  activeElement = null;\n  activeElementInst = null;\n}\n\nfunction getInstIfValueChanged(targetInst, nativeEvent) {\n  var updated = inputValueTracking.updateValueIfChanged(targetInst);\n  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;\n\n  if (updated || simulated) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topChange') {\n    return targetInst;\n  }\n}\n\nfunction handleEventsForChangeEventIE8(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForChangeEventIE8();\n    startWatchingForChangeEventIE8(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForChangeEventIE8();\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (ExecutionEnvironment.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n\n  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);\n}\n\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n\n  activeElement = null;\n  activeElementInst = null;\n}\n\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // In IE8, we can capture almost all .value changes by adding a\n    // propertychange handler and looking for events with propertyName\n    // equal to 'value'\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst, nativeEvent);\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {\n  if (topLevelType === 'topClick') {\n    return getInstIfValueChanged(targetInst, nativeEvent);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {\n  if (topLevelType === 'topInput' || topLevelType === 'topChange') {\n    return getInstIfValueChanged(targetInst, nativeEvent);\n  }\n}\n\nfunction handleControlledInputBlur(inst, node) {\n  // TODO: In IE, inst is occasionally null. Why?\n  if (inst == null) {\n    return;\n  }\n\n  // Fiber and ReactDOM keep wrapper state in separate places\n  var state = inst._wrapperState || node._wrapperState;\n\n  if (!state || !state.controlled || node.type !== 'number') {\n    return;\n  }\n\n  // If controlled, assign the value attribute to the current value on blur\n  var value = '' + node.value;\n  if (node.getAttribute('value') !== value) {\n    node.setAttribute('value', value);\n  }\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n\n  _allowSimulatedPassThrough: true,\n  _isInputEventSupported: isInputEventSupported,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;\n\n    var getTargetInstFunc, handleEventFunc;\n    if (shouldUseChangeEvent(targetNode)) {\n      if (doesChangeEventBubble) {\n        getTargetInstFunc = getTargetInstForChangeEvent;\n      } else {\n        handleEventFunc = handleEventsForChangeEventIE8;\n      }\n    } else if (isTextInputElement(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventPolyfill;\n        handleEventFunc = handleEventsForInputEventPolyfill;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);\n      if (inst) {\n        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n\n    // When blurring, set the value attribute for number inputs\n    if (topLevelType === 'topBlur') {\n      handleControlledInputBlur(targetInst, targetNode);\n    }\n  }\n};\n\nmodule.exports = ChangeEventPlugin;"]}