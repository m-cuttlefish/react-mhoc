{"version":3,"sources":["node_modules/react-dom/lib/checkReactTypeSpec.js"],"names":["_prodInvariant","require","ReactPropTypeLocationNames","ReactPropTypesSecret","invariant","warning","ReactComponentTreeHook","process","env","NODE_ENV","loggedTypeFailures","checkReactTypeSpec","typeSpecs","values","location","componentName","element","debugID","typeSpecName","hasOwnProperty","error","ex","Error","message","componentStackInfo","getStackAddendumByID","getCurrentStackAddendum","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;;;AAEA,IAAIA,iBAAiBC,QAAQ,sBAAR,CAArB;;AAEA,IAAIC,6BAA6BD,QAAQ,8BAAR,CAAjC;AACA,IAAIE,uBAAuBF,QAAQ,wBAAR,CAA3B;;AAEA,IAAIG,YAAYH,QAAQ,oBAAR,CAAhB;AACA,IAAII,UAAUJ,QAAQ,kBAAR,CAAd;;AAEA,IAAIK,sBAAJ;;AAEA,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,QAAQC,GAA1C,IAAiDD,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,MAA9E,EAAsF;AACpF;AACA;AACA;AACA;AACA;AACAH,2BAAyBL,QAAQ,kCAAR,CAAzB;AACD;;AAED,IAAIS,qBAAqB,EAAzB;;AAEA;;;;;;;;;;;;AAYA,SAASC,kBAAT,CAA4BC,SAA5B,EAAuCC,MAAvC,EAA+CC,QAA/C,EAAyDC,aAAzD,EAAwEC,OAAxE,EAAiFC,OAAjF,EAA0F;AACxF,OAAK,IAAIC,YAAT,IAAyBN,SAAzB,EAAoC;AAClC,QAAIA,UAAUO,cAAV,CAAyBD,YAAzB,CAAJ,EAA4C;AAC1C,UAAIE,KAAJ;AACA;AACA;AACA;AACA,UAAI;AACF;AACA;AACA,UAAE,OAAOR,UAAUM,YAAV,CAAP,KAAmC,UAArC,IAAmDX,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCL,UAAU,KAAV,EAAiB,mFAAjB,EAAsGW,iBAAiB,aAAvH,EAAsIb,2BAA2BY,QAA3B,CAAtI,EAA4KI,YAA5K,CAAxC,GAAoOlB,eAAe,IAAf,EAAqBe,iBAAiB,aAAtC,EAAqDb,2BAA2BY,QAA3B,CAArD,EAA2FI,YAA3F,CAAvR,GAAkY,KAAK,CAAvY;AACAE,gBAAQR,UAAUM,YAAV,EAAwBL,MAAxB,EAAgCK,YAAhC,EAA8CH,aAA9C,EAA6DD,QAA7D,EAAuE,IAAvE,EAA6EX,oBAA7E,CAAR;AACD,OALD,CAKE,OAAOkB,EAAP,EAAW;AACXD,gBAAQC,EAAR;AACD;AACDd,cAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCJ,QAAQ,CAACe,KAAD,IAAUA,iBAAiBE,KAAnC,EAA0C,oEAAoE,+DAApE,GAAsI,iEAAtI,GAA0M,gEAA1M,GAA6Q,iCAAvT,EAA0VP,iBAAiB,aAA3W,EAA0Xb,2BAA2BY,QAA3B,CAA1X,EAAgaI,YAAha,SAAqbE,KAArb,yCAAqbA,KAArb,EAAxC,GAAse,KAAK,CAA3e;AACA,UAAIA,iBAAiBE,KAAjB,IAA0B,EAAEF,MAAMG,OAAN,IAAiBb,kBAAnB,CAA9B,EAAsE;AACpE;AACA;AACAA,2BAAmBU,MAAMG,OAAzB,IAAoC,IAApC;;AAEA,YAAIC,qBAAqB,EAAzB;;AAEA,YAAIjB,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,cAAI,CAACH,sBAAL,EAA6B;AAC3BA,qCAAyBL,QAAQ,kCAAR,CAAzB;AACD;AACD,cAAIgB,YAAY,IAAhB,EAAsB;AACpBO,iCAAqBlB,uBAAuBmB,oBAAvB,CAA4CR,OAA5C,CAArB;AACD,WAFD,MAEO,IAAID,YAAY,IAAhB,EAAsB;AAC3BQ,iCAAqBlB,uBAAuBoB,uBAAvB,CAA+CV,OAA/C,CAArB;AACD;AACF;;AAEDT,gBAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCJ,QAAQ,KAAR,EAAe,sBAAf,EAAuCS,QAAvC,EAAiDM,MAAMG,OAAvD,EAAgEC,kBAAhE,CAAxC,GAA8H,KAAK,CAAnI;AACD;AACF;AACF;AACF;;AAEDG,OAAOC,OAAP,GAAiBjB,kBAAjB","file":"checkReactTypeSpec.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar ReactPropTypeLocationNames = require('./ReactPropTypeLocationNames');\nvar ReactPropTypesSecret = require('./ReactPropTypesSecret');\n\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nvar ReactComponentTreeHook;\n\nif (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {\n  // Temporary hack.\n  // Inline requires don't work well with Jest:\n  // https://github.com/facebook/react/issues/7240\n  // Remove the inline requires when we don't need them anymore:\n  // https://github.com/facebook/react/pull/7178\n  ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\n}\n\nvar loggedTypeFailures = {};\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?object} element The React element that is being type-checked\n * @param {?number} debugID The React component instance that is being type-checked\n * @private\n */\nfunction checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {\n  for (var typeSpecName in typeSpecs) {\n    if (typeSpecs.hasOwnProperty(typeSpecName)) {\n      var error;\n      // Prop type validation may throw. In case they do, we don't want to\n      // fail the render phase where it didn't fail before. So we log it.\n      // After these have been cleaned up, we'll let them throw.\n      try {\n        // This is intentionally an invariant that gets caught. It's the same\n        // behavior as without this statement except with a better message.\n        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;\n        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n      } catch (ex) {\n        error = ex;\n      }\n      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;\n      if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n        // Only monitor this failure once because there tends to be a lot of the\n        // same error.\n        loggedTypeFailures[error.message] = true;\n\n        var componentStackInfo = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!ReactComponentTreeHook) {\n            ReactComponentTreeHook = require('react/lib/ReactComponentTreeHook');\n          }\n          if (debugID !== null) {\n            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);\n          } else if (element !== null) {\n            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);\n          }\n        }\n\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;\n      }\n    }\n  }\n}\n\nmodule.exports = checkReactTypeSpec;"]}