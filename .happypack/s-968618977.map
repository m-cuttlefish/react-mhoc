{"version":3,"sources":["node_modules/react-dom/lib/ReactDOMComponentTree.js"],"names":["_prodInvariant","require","DOMProperty","ReactDOMComponentFlags","invariant","ATTR_NAME","ID_ATTRIBUTE_NAME","Flags","internalInstanceKey","Math","random","toString","slice","shouldPrecacheNode","node","nodeID","nodeType","getAttribute","String","nodeValue","getRenderedHostOrTextFromComponent","component","rendered","_renderedComponent","precacheNode","inst","hostInst","_hostNode","uncacheNode","precacheChildNodes","_flags","hasCachedChildNodes","children","_renderedChildren","childNode","firstChild","outer","name","hasOwnProperty","childInst","childID","_domID","nextSibling","process","env","NODE_ENV","getClosestInstanceFromNode","parents","push","parentNode","closest","pop","length","getInstanceFromNode","getNodeFromInstance","undefined","_hostParent","ReactDOMComponentTree","module","exports"],"mappings":"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","file":"ReactDOMComponentTree.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMProperty = require('./DOMProperty');\nvar ReactDOMComponentFlags = require('./ReactDOMComponentFlags');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;\nvar Flags = ReactDOMComponentFlags;\n\nvar internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);\n\n/**\n * Check if a given node should be cached.\n */\nfunction shouldPrecacheNode(node, nodeID) {\n  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';\n}\n\n/**\n * Drill down (through composites and empty components) until we get a host or\n * host text component.\n *\n * This is pretty polymorphic but unavoidable with the current structure we have\n * for `_renderedChildren`.\n */\nfunction getRenderedHostOrTextFromComponent(component) {\n  var rendered;\n  while (rendered = component._renderedComponent) {\n    component = rendered;\n  }\n  return component;\n}\n\n/**\n * Populate `_hostNode` on the rendered host/text component with the given\n * DOM node. The passed `inst` can be a composite.\n */\nfunction precacheNode(inst, node) {\n  var hostInst = getRenderedHostOrTextFromComponent(inst);\n  hostInst._hostNode = node;\n  node[internalInstanceKey] = hostInst;\n}\n\nfunction uncacheNode(inst) {\n  var node = inst._hostNode;\n  if (node) {\n    delete node[internalInstanceKey];\n    inst._hostNode = null;\n  }\n}\n\n/**\n * Populate `_hostNode` on each child of `inst`, assuming that the children\n * match up with the DOM (element) children of `node`.\n *\n * We cache entire levels at once to avoid an n^2 problem where we access the\n * children of a node sequentially and have to walk from the start to our target\n * node every time.\n *\n * Since we update `_renderedChildren` and the actual DOM at (slightly)\n * different times, we could race here and see a newer `_renderedChildren` than\n * the DOM nodes we see. To avoid this, ReactMultiChild calls\n * `prepareToManageChildren` before we change `_renderedChildren`, at which\n * time the container's child nodes are always cached (until it unmounts).\n */\nfunction precacheChildNodes(inst, node) {\n  if (inst._flags & Flags.hasCachedChildNodes) {\n    return;\n  }\n  var children = inst._renderedChildren;\n  var childNode = node.firstChild;\n  outer: for (var name in children) {\n    if (!children.hasOwnProperty(name)) {\n      continue;\n    }\n    var childInst = children[name];\n    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;\n    if (childID === 0) {\n      // We're currently unmounting this child in ReactMultiChild; skip it.\n      continue;\n    }\n    // We assume the child nodes are in the same order as the child instances.\n    for (; childNode !== null; childNode = childNode.nextSibling) {\n      if (shouldPrecacheNode(childNode, childID)) {\n        precacheNode(childInst, childNode);\n        continue outer;\n      }\n    }\n    // We reached the end of the DOM children without finding an ID match.\n    !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;\n  }\n  inst._flags |= Flags.hasCachedChildNodes;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  // Walk up the tree until we find an ancestor whose instance we have cached.\n  var parents = [];\n  while (!node[internalInstanceKey]) {\n    parents.push(node);\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var closest;\n  var inst;\n  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {\n    closest = inst;\n    if (parents.length) {\n      precacheChildNodes(inst, node);\n    }\n  }\n\n  return closest;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = getClosestInstanceFromNode(node);\n  if (inst != null && inst._hostNode === node) {\n    return inst;\n  } else {\n    return null;\n  }\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;\n\n  if (inst._hostNode) {\n    return inst._hostNode;\n  }\n\n  // Walk up the tree until we find an ancestor whose DOM node we have cached.\n  var parents = [];\n  while (!inst._hostNode) {\n    parents.push(inst);\n    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;\n    inst = inst._hostParent;\n  }\n\n  // Now parents contains each ancestor that does *not* have a cached native\n  // node, and `inst` is the deepest ancestor that does.\n  for (; parents.length; inst = parents.pop()) {\n    precacheChildNodes(inst, inst._hostNode);\n  }\n\n  return inst._hostNode;\n}\n\nvar ReactDOMComponentTree = {\n  getClosestInstanceFromNode: getClosestInstanceFromNode,\n  getInstanceFromNode: getInstanceFromNode,\n  getNodeFromInstance: getNodeFromInstance,\n  precacheChildNodes: precacheChildNodes,\n  precacheNode: precacheNode,\n  uncacheNode: uncacheNode\n};\n\nmodule.exports = ReactDOMComponentTree;"]}