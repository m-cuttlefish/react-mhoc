{"version":3,"sources":["node_modules/react-dom/lib/accumulateInto.js"],"names":["_prodInvariant","require","invariant","accumulateInto","current","next","process","env","NODE_ENV","Array","isArray","push","apply","concat","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,iBAAiBC,QAAQ,sBAAR,CAArB;;AAEA,IAAIC,YAAYD,QAAQ,oBAAR,CAAhB;;AAEA;;;;;;;;;;;;;AAaA,SAASE,cAAT,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuC;AACrC,IAAEA,QAAQ,IAAV,IAAkBC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,UAAU,KAAV,EAAiB,uEAAjB,CAAxC,GAAoIF,eAAe,IAAf,CAAtJ,GAA6K,KAAK,CAAlL;;AAEA,MAAII,WAAW,IAAf,EAAqB;AACnB,WAAOC,IAAP;AACD;;AAED;AACA;AACA,MAAII,MAAMC,OAAN,CAAcN,OAAd,CAAJ,EAA4B;AAC1B,QAAIK,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvBD,cAAQO,IAAR,CAAaC,KAAb,CAAmBR,OAAnB,EAA4BC,IAA5B;AACA,aAAOD,OAAP;AACD;AACDA,YAAQO,IAAR,CAAaN,IAAb;AACA,WAAOD,OAAP;AACD;;AAED,MAAIK,MAAMC,OAAN,CAAcL,IAAd,CAAJ,EAAyB;AACvB;AACA,WAAO,CAACD,OAAD,EAAUS,MAAV,CAAiBR,IAAjB,CAAP;AACD;;AAED,SAAO,CAACD,OAAD,EAAUC,IAAV,CAAP;AACD;;AAEDS,OAAOC,OAAP,GAAiBZ,cAAjB","file":"accumulateInto.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;"]}