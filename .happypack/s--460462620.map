{"version":3,"sources":["node_modules/react-dom/lib/adler32.js"],"names":["MOD","adler32","data","a","b","i","l","length","m","n","Math","min","charCodeAt","module","exports"],"mappings":"AAAA;;;;;;;;;;;AAWA;;AAEA,IAAIA,MAAM,KAAV;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAIJ,KAAKK,MAAb;AACA,MAAIC,IAAIF,IAAI,CAAC,GAAb;AACA,SAAOD,IAAIG,CAAX,EAAc;AACZ,QAAIC,IAAIC,KAAKC,GAAL,CAASN,IAAI,IAAb,EAAmBG,CAAnB,CAAR;AACA,WAAOH,IAAII,CAAX,EAAcJ,KAAK,CAAnB,EAAsB;AACpBD,WAAK,CAACD,KAAKD,KAAKU,UAAL,CAAgBP,CAAhB,CAAN,KAA6BF,KAAKD,KAAKU,UAAL,CAAgBP,IAAI,CAApB,CAAlC,KAA6DF,KAAKD,KAAKU,UAAL,CAAgBP,IAAI,CAApB,CAAlE,KAA6FF,KAAKD,KAAKU,UAAL,CAAgBP,IAAI,CAApB,CAAlG,CAAL;AACD;AACDF,SAAKH,GAAL;AACAI,SAAKJ,GAAL;AACD;AACD,SAAOK,IAAIC,CAAX,EAAcD,GAAd,EAAmB;AACjBD,SAAKD,KAAKD,KAAKU,UAAL,CAAgBP,CAAhB,CAAV;AACD;AACDF,OAAKH,GAAL;AACAI,OAAKJ,GAAL;AACA,SAAOG,IAAIC,KAAK,EAAhB;AACD;;AAEDS,OAAOC,OAAP,GAAiBb,OAAjB","file":"adler32.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * \n */\n\n'use strict';\n\nvar MOD = 65521;\n\n// adler32 is not cryptographically strong, and is only used to sanity check that\n// markup generated on the server matches the markup generated on the client.\n// This implementation (a modified version of the SheetJS version) has been optimized\n// for our use case, at the expense of conforming to the adler32 specification\n// for non-ascii inputs.\nfunction adler32(data) {\n  var a = 1;\n  var b = 0;\n  var i = 0;\n  var l = data.length;\n  var m = l & ~0x3;\n  while (i < m) {\n    var n = Math.min(i + 4096, m);\n    for (; i < n; i += 4) {\n      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));\n    }\n    a %= MOD;\n    b %= MOD;\n  }\n  for (; i < l; i++) {\n    b += a += data.charCodeAt(i);\n  }\n  a %= MOD;\n  b %= MOD;\n  return a | b << 16;\n}\n\nmodule.exports = adler32;"]}