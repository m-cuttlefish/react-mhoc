{"version":3,"sources":["node_modules/react-dom/lib/ReactDOMTextComponent.js"],"names":["_prodInvariant","require","_assign","DOMChildrenOperations","DOMLazyTree","ReactDOMComponentTree","escapeTextContentForBrowser","invariant","validateDOMNesting","ReactDOMTextComponent","text","_currentElement","_stringText","_hostNode","_hostParent","_domID","_mountIndex","_closingComment","_commentNodes","prototype","mountComponent","transaction","hostParent","hostContainerInfo","context","process","env","NODE_ENV","parentInfo","_ancestorInfo","domID","_idCounter","openingValue","closingValue","useCreateElement","ownerDocument","_ownerDocument","openingComment","createComment","closingComment","lazyTree","createDocumentFragment","queueChild","createTextNode","precacheNode","escapedText","renderToStaticMarkup","receiveComponent","nextText","nextStringText","commentNodes","getHostNode","replaceDelimitedText","hostNode","getNodeFromInstance","node","nextSibling","nodeType","nodeValue","unmountComponent","uncacheNode","module","exports"],"mappings":"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","file":"ReactDOMTextComponent.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar DOMChildrenOperations = require('./DOMChildrenOperations');\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar escapeTextContentForBrowser = require('./escapeTextContentForBrowser');\nvar invariant = require('fbjs/lib/invariant');\nvar validateDOMNesting = require('./validateDOMNesting');\n\n/**\n * Text nodes violate a couple assumptions that React makes about components:\n *\n *  - When mounting text into the DOM, adjacent text nodes are merged.\n *  - Text nodes cannot be assigned a React root ID.\n *\n * This component is used to wrap strings between comment nodes so that they\n * can undergo the same reconciliation that is applied to elements.\n *\n * TODO: Investigate representing React components in the DOM with text nodes.\n *\n * @class ReactDOMTextComponent\n * @extends ReactComponent\n * @internal\n */\nvar ReactDOMTextComponent = function (text) {\n  // TODO: This is really a ReactText (ReactNode), not a ReactElement\n  this._currentElement = text;\n  this._stringText = '' + text;\n  // ReactDOMComponentTree uses these:\n  this._hostNode = null;\n  this._hostParent = null;\n\n  // Properties\n  this._domID = 0;\n  this._mountIndex = 0;\n  this._closingComment = null;\n  this._commentNodes = null;\n};\n\n_assign(ReactDOMTextComponent.prototype, {\n  /**\n   * Creates the markup for this text node. This node is not intended to have\n   * any features besides containing text content.\n   *\n   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction\n   * @return {string} Markup for this text node.\n   * @internal\n   */\n  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {\n    if (process.env.NODE_ENV !== 'production') {\n      var parentInfo;\n      if (hostParent != null) {\n        parentInfo = hostParent._ancestorInfo;\n      } else if (hostContainerInfo != null) {\n        parentInfo = hostContainerInfo._ancestorInfo;\n      }\n      if (parentInfo) {\n        // parentInfo should always be present except for the top-level\n        // component when server rendering\n        validateDOMNesting(null, this._stringText, this, parentInfo);\n      }\n    }\n\n    var domID = hostContainerInfo._idCounter++;\n    var openingValue = ' react-text: ' + domID + ' ';\n    var closingValue = ' /react-text ';\n    this._domID = domID;\n    this._hostParent = hostParent;\n    if (transaction.useCreateElement) {\n      var ownerDocument = hostContainerInfo._ownerDocument;\n      var openingComment = ownerDocument.createComment(openingValue);\n      var closingComment = ownerDocument.createComment(closingValue);\n      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));\n      if (this._stringText) {\n        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));\n      }\n      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));\n      ReactDOMComponentTree.precacheNode(this, openingComment);\n      this._closingComment = closingComment;\n      return lazyTree;\n    } else {\n      var escapedText = escapeTextContentForBrowser(this._stringText);\n\n      if (transaction.renderToStaticMarkup) {\n        // Normally we'd wrap this between comment nodes for the reasons stated\n        // above, but since this is a situation where React won't take over\n        // (static pages), we can simply return the text as it is.\n        return escapedText;\n      }\n\n      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';\n    }\n  },\n\n  /**\n   * Updates this component by updating the text content.\n   *\n   * @param {ReactText} nextText The next text content\n   * @param {ReactReconcileTransaction} transaction\n   * @internal\n   */\n  receiveComponent: function (nextText, transaction) {\n    if (nextText !== this._currentElement) {\n      this._currentElement = nextText;\n      var nextStringText = '' + nextText;\n      if (nextStringText !== this._stringText) {\n        // TODO: Save this as pending props and use performUpdateIfNecessary\n        // and/or updateComponent to do the actual update for consistency with\n        // other component types?\n        this._stringText = nextStringText;\n        var commentNodes = this.getHostNode();\n        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);\n      }\n    }\n  },\n\n  getHostNode: function () {\n    var hostNode = this._commentNodes;\n    if (hostNode) {\n      return hostNode;\n    }\n    if (!this._closingComment) {\n      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);\n      var node = openingComment.nextSibling;\n      while (true) {\n        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;\n        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {\n          this._closingComment = node;\n          break;\n        }\n        node = node.nextSibling;\n      }\n    }\n    hostNode = [this._hostNode, this._closingComment];\n    this._commentNodes = hostNode;\n    return hostNode;\n  },\n\n  unmountComponent: function () {\n    this._closingComment = null;\n    this._commentNodes = null;\n    ReactDOMComponentTree.uncacheNode(this);\n  }\n});\n\nmodule.exports = ReactDOMTextComponent;"]}