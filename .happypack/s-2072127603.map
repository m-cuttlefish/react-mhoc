{"version":3,"sources":["node_modules/react-dom/lib/BeforeInputEventPlugin.js"],"names":["EventPropagators","require","ExecutionEnvironment","FallbackCompositionState","SyntheticCompositionEvent","SyntheticInputEvent","END_KEYCODES","START_KEYCODE","canUseCompositionEvent","canUseDOM","window","documentMode","document","canUseTextInputEvent","isPresto","useFallbackCompositionData","opera","version","parseInt","SPACEBAR_CODE","SPACEBAR_CHAR","String","fromCharCode","eventTypes","beforeInput","phasedRegistrationNames","bubbled","captured","dependencies","compositionEnd","compositionStart","compositionUpdate","hasSpaceKeypress","isKeypressCommand","nativeEvent","ctrlKey","altKey","metaKey","getCompositionEventType","topLevelType","isFallbackCompositionStart","keyCode","isFallbackCompositionEnd","indexOf","getDataFromCustomEvent","detail","data","currentComposition","extractCompositionEvent","targetInst","nativeEventTarget","eventType","fallbackData","getPooled","getData","event","customData","accumulateTwoPhaseDispatches","getNativeBeforeInputChars","which","chars","getFallbackBeforeInputChars","release","extractBeforeInputEvent","BeforeInputEventPlugin","extractEvents","module","exports"],"mappings":"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","file":"BeforeInputEventPlugin.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: 'onBeforeInput',\n      captured: 'onBeforeInputCapture'\n    },\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionEnd',\n      captured: 'onCompositionEndCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionStart',\n      captured: 'onCompositionStartCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionUpdate',\n      captured: 'onCompositionUpdateCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case 'topCompositionStart':\n      return eventTypes.compositionStart;\n    case 'topCompositionEnd':\n      return eventTypes.compositionEnd;\n    case 'topCompositionUpdate':\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topKeyUp':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case 'topKeyDown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case 'topKeyPress':\n    case 'topMouseDown':\n    case 'topBlur':\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topCompositionEnd':\n      return getDataFromCustomEvent(nativeEvent);\n    case 'topKeyPress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'topTextInput':\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (currentComposition) {\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case 'topPaste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case 'topKeyPress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case 'topCompositionEnd':\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;"]}