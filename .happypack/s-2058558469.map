{"version":3,"sources":["node_modules/react-dom/lib/DOMLazyTree.js"],"names":["DOMNamespaces","require","setInnerHTML","createMicrosoftUnsafeLocalFunction","setTextContent","ELEMENT_NODE_TYPE","DOCUMENT_FRAGMENT_NODE_TYPE","enableLazy","document","documentMode","navigator","userAgent","test","insertTreeChildren","tree","node","children","length","i","insertTreeBefore","html","text","parentNode","referenceNode","nodeType","nodeName","toLowerCase","namespaceURI","insertBefore","replaceChildWithTree","oldNode","newTree","replaceChild","queueChild","parentTree","childTree","push","appendChild","queueHTML","queueText","toString","DOMLazyTree","module","exports"],"mappings":"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","file":"DOMLazyTree.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar DOMNamespaces = require('./DOMNamespaces');\nvar setInnerHTML = require('./setInnerHTML');\n\nvar createMicrosoftUnsafeLocalFunction = require('./createMicrosoftUnsafeLocalFunction');\nvar setTextContent = require('./setTextContent');\n\nvar ELEMENT_NODE_TYPE = 1;\nvar DOCUMENT_FRAGMENT_NODE_TYPE = 11;\n\n/**\n * In IE (8-11) and Edge, appending nodes with no children is dramatically\n * faster than appending a full subtree, so we essentially queue up the\n * .appendChild calls here and apply them so each node is added to its parent\n * before any children are added.\n *\n * In other browsers, doing so is slower or neutral compared to the other order\n * (in Firefox, twice as slow) so we only do this inversion in IE.\n *\n * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.\n */\nvar enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\\bEdge\\/\\d/.test(navigator.userAgent);\n\nfunction insertTreeChildren(tree) {\n  if (!enableLazy) {\n    return;\n  }\n  var node = tree.node;\n  var children = tree.children;\n  if (children.length) {\n    for (var i = 0; i < children.length; i++) {\n      insertTreeBefore(node, children[i], null);\n    }\n  } else if (tree.html != null) {\n    setInnerHTML(node, tree.html);\n  } else if (tree.text != null) {\n    setTextContent(node, tree.text);\n  }\n}\n\nvar insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {\n  // DocumentFragments aren't actually part of the DOM after insertion so\n  // appending children won't update the DOM. We need to ensure the fragment\n  // is properly populated first, breaking out of our lazy approach for just\n  // this level. Also, some <object> plugins (like Flash Player) will read\n  // <param> nodes immediately upon insertion into the DOM, so <object>\n  // must also be populated prior to insertion into the DOM.\n  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {\n    insertTreeChildren(tree);\n    parentNode.insertBefore(tree.node, referenceNode);\n  } else {\n    parentNode.insertBefore(tree.node, referenceNode);\n    insertTreeChildren(tree);\n  }\n});\n\nfunction replaceChildWithTree(oldNode, newTree) {\n  oldNode.parentNode.replaceChild(newTree.node, oldNode);\n  insertTreeChildren(newTree);\n}\n\nfunction queueChild(parentTree, childTree) {\n  if (enableLazy) {\n    parentTree.children.push(childTree);\n  } else {\n    parentTree.node.appendChild(childTree.node);\n  }\n}\n\nfunction queueHTML(tree, html) {\n  if (enableLazy) {\n    tree.html = html;\n  } else {\n    setInnerHTML(tree.node, html);\n  }\n}\n\nfunction queueText(tree, text) {\n  if (enableLazy) {\n    tree.text = text;\n  } else {\n    setTextContent(tree.node, text);\n  }\n}\n\nfunction toString() {\n  return this.node.nodeName;\n}\n\nfunction DOMLazyTree(node) {\n  return {\n    node: node,\n    children: [],\n    html: null,\n    text: null,\n    toString: toString\n  };\n}\n\nDOMLazyTree.insertTreeBefore = insertTreeBefore;\nDOMLazyTree.replaceChildWithTree = replaceChildWithTree;\nDOMLazyTree.queueChild = queueChild;\nDOMLazyTree.queueHTML = queueHTML;\nDOMLazyTree.queueText = queueText;\n\nmodule.exports = DOMLazyTree;"]}