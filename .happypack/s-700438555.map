{"version":3,"sources":["node_modules/react-dom/lib/EventPropagators.js"],"names":["EventPluginHub","require","EventPluginUtils","accumulateInto","forEachAccumulated","warning","getListener","listenerAtPhase","inst","event","propagationPhase","registrationName","dispatchConfig","phasedRegistrationNames","accumulateDirectionalDispatches","phase","process","env","NODE_ENV","listener","_dispatchListeners","_dispatchInstances","accumulateTwoPhaseDispatchesSingle","traverseTwoPhase","_targetInst","accumulateTwoPhaseDispatchesSingleSkipTarget","targetInst","parentInst","getParentInstance","accumulateDispatches","ignoredDirection","accumulateDirectDispatchesSingle","accumulateTwoPhaseDispatches","events","accumulateTwoPhaseDispatchesSkipTarget","accumulateEnterLeaveDispatches","leave","enter","from","to","traverseEnterLeave","accumulateDirectDispatches","EventPropagators","module","exports"],"mappings":"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","file":"EventPropagators.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPluginHub = require('./EventPluginHub');\nvar EventPluginUtils = require('./EventPluginUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar warning = require('fbjs/lib/warning');\n\nvar getListener = EventPluginHub.getListener;\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(inst, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return getListener(inst, registrationName);\n}\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;\n  }\n  var listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    var targetInst = event._targetInst;\n    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;\n    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(inst, ignoredDirection, event) {\n  if (event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = getListener(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {\n  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  forEachAccumulated(events, accumulateDirectDispatchesSingle);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing event a\n * single one.\n *\n * @constructor EventPropagators\n */\nvar EventPropagators = {\n  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,\n  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,\n  accumulateDirectDispatches: accumulateDirectDispatches,\n  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches\n};\n\nmodule.exports = EventPropagators;"]}