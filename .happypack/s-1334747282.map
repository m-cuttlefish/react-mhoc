{"version":3,"sources":["node_modules/react-dom/lib/Danger.js"],"names":["_prodInvariant","require","DOMLazyTree","ExecutionEnvironment","createNodesFromMarkup","emptyFunction","invariant","Danger","dangerouslyReplaceNodeWithMarkup","oldChild","markup","canUseDOM","process","env","NODE_ENV","nodeName","newChild","parentNode","replaceChild","replaceChildWithTree","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,iBAAiBC,QAAQ,sBAAR,CAArB;;AAEA,IAAIC,cAAcD,QAAQ,eAAR,CAAlB;AACA,IAAIE,uBAAuBF,QAAQ,+BAAR,CAA3B;;AAEA,IAAIG,wBAAwBH,QAAQ,gCAAR,CAA5B;AACA,IAAII,gBAAgBJ,QAAQ,wBAAR,CAApB;AACA,IAAIK,YAAYL,QAAQ,oBAAR,CAAhB;;AAEA,IAAIM,SAAS;AACX;;;;;;;;AAQAC,oCAAkC,0CAAUC,QAAV,EAAoBC,MAApB,EAA4B;AAC5D,KAACP,qBAAqBQ,SAAtB,GAAkCC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,UAAU,KAAV,EAAiB,gPAAjB,CAAxC,GAA6SN,eAAe,IAAf,CAA/U,GAAsW,KAAK,CAA3W;AACA,KAACU,MAAD,GAAUE,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,UAAU,KAAV,EAAiB,wDAAjB,CAAxC,GAAqHN,eAAe,IAAf,CAA/H,GAAsJ,KAAK,CAA3J;AACA,MAAES,SAASM,QAAT,KAAsB,MAAxB,IAAkCH,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCR,UAAU,KAAV,EAAiB,yPAAjB,CAAxC,GAAsTN,eAAe,IAAf,CAAxV,GAA+W,KAAK,CAApX;;AAEA,QAAI,OAAOU,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,UAAIM,WAAWZ,sBAAsBM,MAAtB,EAA8BL,aAA9B,EAA6C,CAA7C,CAAf;AACAI,eAASQ,UAAT,CAAoBC,YAApB,CAAiCF,QAAjC,EAA2CP,QAA3C;AACD,KAHD,MAGO;AACLP,kBAAYiB,oBAAZ,CAAiCV,QAAjC,EAA2CC,MAA3C;AACD;AACF;AApBU,CAAb;;AAuBAU,OAAOC,OAAP,GAAiBd,MAAjB","file":"Danger.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar DOMLazyTree = require('./DOMLazyTree');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar createNodesFromMarkup = require('fbjs/lib/createNodesFromMarkup');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Danger = {\n  /**\n   * Replaces a node with a string of markup at its current position within its\n   * parent. The markup must render into a single root node.\n   *\n   * @param {DOMElement} oldChild Child node to replace.\n   * @param {string} markup Markup to render in place of the child node.\n   * @internal\n   */\n  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {\n    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;\n    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;\n    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;\n\n    if (typeof markup === 'string') {\n      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];\n      oldChild.parentNode.replaceChild(newChild, oldChild);\n    } else {\n      DOMLazyTree.replaceChildWithTree(oldChild, markup);\n    }\n  }\n};\n\nmodule.exports = Danger;"]}