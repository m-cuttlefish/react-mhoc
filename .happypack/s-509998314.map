{"version":3,"sources":["node_modules/react-dom/lib/ReactUpdates.js"],"names":["_prodInvariant","require","_assign","CallbackQueue","PooledClass","ReactFeatureFlags","ReactReconciler","Transaction","invariant","dirtyComponents","updateBatchNumber","asapCallbackQueue","getPooled","asapEnqueued","batchingStrategy","ensureInjected","ReactUpdates","ReactReconcileTransaction","process","env","NODE_ENV","NESTED_UPDATES","initialize","dirtyComponentsLength","length","close","splice","flushBatchedUpdates","UPDATE_QUEUEING","callbackQueue","reset","notifyAll","TRANSACTION_WRAPPERS","ReactUpdatesFlushTransaction","reinitializeTransaction","reconcileTransaction","prototype","getTransactionWrappers","destructor","release","perform","method","scope","a","call","addPoolingTo","batchedUpdates","callback","b","c","d","e","mountOrderComparator","c1","c2","_mountOrder","runBatchedUpdates","transaction","len","sort","i","component","callbacks","_pendingCallbacks","markerName","logTopLevelRenders","namedComponent","_currentElement","type","isReactTopLevelWrapper","_renderedComponent","getName","console","time","performUpdateIfNecessary","timeEnd","j","enqueue","getPublicInstance","queue","enqueueUpdate","isBatchingUpdates","push","_updateBatchNumber","asap","context","ReactUpdatesInjection","injectReconcileTransaction","ReconcileTransaction","injectBatchingStrategy","_batchingStrategy","injection","module","exports"],"mappings":"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","file":"ReactUpdates.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant'),\n    _assign = require('object-assign');\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactFeatureFlags = require('./ReactFeatureFlags');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar updateBatchNumber = 0;\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(\n  /* useCreateElement */true);\n}\n\n_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  // Any updates enqueued while reconciling must be performed after this entire\n  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and\n  // C, B could update twice in a single batch if C's render enqueues an update\n  // to B (since B would have already updated, we should skip it, and the only\n  // way we can know to do so is by checking the batch counter).\n  updateBatchNumber++;\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    var markerName;\n    if (ReactFeatureFlags.logTopLevelRenders) {\n      var namedComponent = component;\n      // Duck type TopLevelWrapper. This is probably always true.\n      if (component._currentElement.type.isReactTopLevelWrapper) {\n        namedComponent = component._renderedComponent;\n      }\n      markerName = 'React update: ' + namedComponent.getName();\n      console.time(markerName);\n    }\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);\n\n    if (markerName) {\n      console.timeEnd(markerName);\n    }\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n  if (component._updateBatchNumber == null) {\n    component._updateBatchNumber = updateBatchNumber + 1;\n  }\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context whereupdates are not being batched.') : _prodInvariant('125') : void 0;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;"]}