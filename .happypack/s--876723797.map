{"version":3,"sources":["node_modules/react-dom/lib/EnterLeaveEventPlugin.js"],"names":["EventPropagators","require","ReactDOMComponentTree","SyntheticMouseEvent","eventTypes","mouseEnter","registrationName","dependencies","mouseLeave","EnterLeaveEventPlugin","extractEvents","topLevelType","targetInst","nativeEvent","nativeEventTarget","relatedTarget","fromElement","win","window","doc","ownerDocument","defaultView","parentWindow","from","to","related","toElement","getClosestInstanceFromNode","fromNode","getNodeFromInstance","toNode","leave","getPooled","type","target","enter","accumulateEnterLeaveDispatches","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,mBAAmBC,QAAQ,oBAAR,CAAvB;AACA,IAAIC,wBAAwBD,QAAQ,yBAAR,CAA5B;AACA,IAAIE,sBAAsBF,QAAQ,uBAAR,CAA1B;;AAEA,IAAIG,aAAa;AACfC,cAAY;AACVC,sBAAkB,cADR;AAEVC,kBAAc,CAAC,aAAD,EAAgB,cAAhB;AAFJ,GADG;AAKfC,cAAY;AACVF,sBAAkB,cADR;AAEVC,kBAAc,CAAC,aAAD,EAAgB,cAAhB;AAFJ;AALG,CAAjB;;AAWA,IAAIE,wBAAwB;AAC1BL,cAAYA,UADc;;AAG1B;;;;;;;AAOAM,iBAAe,uBAAUC,YAAV,EAAwBC,UAAxB,EAAoCC,WAApC,EAAiDC,iBAAjD,EAAoE;AACjF,QAAIH,iBAAiB,cAAjB,KAAoCE,YAAYE,aAAZ,IAA6BF,YAAYG,WAA7E,CAAJ,EAA+F;AAC7F,aAAO,IAAP;AACD;AACD,QAAIL,iBAAiB,aAAjB,IAAkCA,iBAAiB,cAAvD,EAAuE;AACrE;AACA,aAAO,IAAP;AACD;;AAED,QAAIM,GAAJ;AACA,QAAIH,kBAAkBI,MAAlB,KAA6BJ,iBAAjC,EAAoD;AAClD;AACAG,YAAMH,iBAAN;AACD,KAHD,MAGO;AACL;AACA,UAAIK,MAAML,kBAAkBM,aAA5B;AACA,UAAID,GAAJ,EAAS;AACPF,cAAME,IAAIE,WAAJ,IAAmBF,IAAIG,YAA7B;AACD,OAFD,MAEO;AACLL,cAAMC,MAAN;AACD;AACF;;AAED,QAAIK,IAAJ;AACA,QAAIC,EAAJ;AACA,QAAIb,iBAAiB,aAArB,EAAoC;AAClCY,aAAOX,UAAP;AACA,UAAIa,UAAUZ,YAAYE,aAAZ,IAA6BF,YAAYa,SAAvD;AACAF,WAAKC,UAAUvB,sBAAsByB,0BAAtB,CAAiDF,OAAjD,CAAV,GAAsE,IAA3E;AACD,KAJD,MAIO;AACL;AACAF,aAAO,IAAP;AACAC,WAAKZ,UAAL;AACD;;AAED,QAAIW,SAASC,EAAb,EAAiB;AACf;AACA,aAAO,IAAP;AACD;;AAED,QAAII,WAAWL,QAAQ,IAAR,GAAeN,GAAf,GAAqBf,sBAAsB2B,mBAAtB,CAA0CN,IAA1C,CAApC;AACA,QAAIO,SAASN,MAAM,IAAN,GAAaP,GAAb,GAAmBf,sBAAsB2B,mBAAtB,CAA0CL,EAA1C,CAAhC;;AAEA,QAAIO,QAAQ5B,oBAAoB6B,SAApB,CAA8B5B,WAAWI,UAAzC,EAAqDe,IAArD,EAA2DV,WAA3D,EAAwEC,iBAAxE,CAAZ;AACAiB,UAAME,IAAN,GAAa,YAAb;AACAF,UAAMG,MAAN,GAAeN,QAAf;AACAG,UAAMhB,aAAN,GAAsBe,MAAtB;;AAEA,QAAIK,QAAQhC,oBAAoB6B,SAApB,CAA8B5B,WAAWC,UAAzC,EAAqDmB,EAArD,EAAyDX,WAAzD,EAAsEC,iBAAtE,CAAZ;AACAqB,UAAMF,IAAN,GAAa,YAAb;AACAE,UAAMD,MAAN,GAAeJ,MAAf;AACAK,UAAMpB,aAAN,GAAsBa,QAAtB;;AAEA5B,qBAAiBoC,8BAAjB,CAAgDL,KAAhD,EAAuDI,KAAvD,EAA8DZ,IAA9D,EAAoEC,EAApE;;AAEA,WAAO,CAACO,KAAD,EAAQI,KAAR,CAAP;AACD;AAlEyB,CAA5B;;AAqEAE,OAAOC,OAAP,GAAiB7B,qBAAjB","file":"EnterLeaveEventPlugin.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar EventPropagators = require('./EventPropagators');\nvar ReactDOMComponentTree = require('./ReactDOMComponentTree');\nvar SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n};\n\nvar EnterLeaveEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from;\n    var to;\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);\n    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);\n\n    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n};\n\nmodule.exports = EnterLeaveEventPlugin;"]}