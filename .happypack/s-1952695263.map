{"version":3,"sources":["node_modules/react-dom/lib/ReactHostComponent.js"],"names":["_prodInvariant","require","invariant","genericComponentClass","textComponentClass","ReactHostComponentInjection","injectGenericComponentClass","componentClass","injectTextComponentClass","createInternalComponent","element","process","env","NODE_ENV","type","createInstanceForText","text","isTextComponent","component","ReactHostComponent","injection","module","exports"],"mappings":"AAAA;;;;;;;;;;AAUA;;AAEA,IAAIA,iBAAiBC,QAAQ,sBAAR,CAArB;;AAEA,IAAIC,YAAYD,QAAQ,oBAAR,CAAhB;;AAEA,IAAIE,wBAAwB,IAA5B;AACA,IAAIC,qBAAqB,IAAzB;;AAEA,IAAIC,8BAA8B;AAChC;AACA;AACAC,+BAA6B,qCAAUC,cAAV,EAA0B;AACrDJ,4BAAwBI,cAAxB;AACD,GAL+B;AAMhC;AACA;AACAC,4BAA0B,kCAAUD,cAAV,EAA0B;AAClDH,yBAAqBG,cAArB;AACD;AAV+B,CAAlC;;AAaA;;;;;;AAMA,SAASE,uBAAT,CAAiCC,OAAjC,EAA0C;AACxC,GAACP,qBAAD,GAAyBQ,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,UAAU,KAAV,EAAiB,iDAAjB,EAAoEQ,QAAQI,IAA5E,CAAxC,GAA4Hd,eAAe,KAAf,EAAsBU,QAAQI,IAA9B,CAArJ,GAA2L,KAAK,CAAhM;AACA,SAAO,IAAIX,qBAAJ,CAA0BO,OAA1B,CAAP;AACD;;AAED;;;;AAIA,SAASK,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAO,IAAIZ,kBAAJ,CAAuBY,IAAvB,CAAP;AACD;;AAED;;;;AAIA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AAClC,SAAOA,qBAAqBd,kBAA5B;AACD;;AAED,IAAIe,qBAAqB;AACvBV,2BAAyBA,uBADF;AAEvBM,yBAAuBA,qBAFA;AAGvBE,mBAAiBA,eAHM;AAIvBG,aAAWf;AAJY,CAAzB;;AAOAgB,OAAOC,OAAP,GAAiBH,kBAAjB","file":"ReactHostComponent.js","sourceRoot":"/Users/moyu/my-code/FECode/react-hoc","sourcesContent":["/**\n * Copyright 2014-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\n'use strict';\n\nvar _prodInvariant = require('./reactProdInvariant');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar genericComponentClass = null;\nvar textComponentClass = null;\n\nvar ReactHostComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  }\n};\n\n/**\n * Get a host internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;\n  return new genericComponentClass(element);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactHostComponent = {\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactHostComponentInjection\n};\n\nmodule.exports = ReactHostComponent;"]}